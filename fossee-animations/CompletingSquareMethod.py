from manimlib.imports import *
import numpy as np

class intro(Scene):
    def construct(self):
        t1=TextMobject("Completing","Square")
        t1.set_color_by_tex_to_color_map({"Completing":RED,"Square":BLUE})
        t2=TextMobject("method")
        t1.shift(0.8*UP)
        t1.scale(2)
        t2.scale(0.8)
        t2.shift(3*RIGHT)

        self.play(Write(t1))
        self.play(FadeIn(t2))
        self.wait(1.8)

class example(Scene):
    def construct(self):
        t1=TextMobject("Consider an","equation")
        t1.set_color_by_tex_to_color_map({"equation":GREEN})
        t1.scale(1.4)
        t1.shift(UP)
        #t2=TextMobject("$x^{ 2 }+2x=15$")
        t2a=TextMobject("$x^{ 2 }$")
        t2a.set_color_by_tex_to_color_map({"$x^{ 2 }$":RED})
        t2b=TextMobject("$+$")
        t2b.next_to(t2a,RIGHT,buff=0.3)
        t2c=TextMobject("2x")
        t2c.set_color_by_tex_to_color_map({"2x":GREEN})
        t2c.next_to(t2b,RIGHT,buff=0.3)
        t2d=TextMobject("=")
        t2d.next_to(t2c,RIGHT,buff=0.3)
        t2e=TextMobject("15")
        t2e.set_color_by_tex_to_color_map({"15":MAROON_D})
        t2e.next_to(t2d,RIGHT,buff=0.3)
        t2=VGroup(t2a,t2b,t2c,t2d,t2e)
        t2.scale(1.6)
        t2.shift(UP+LEFT)

        t2a_dup=TextMobject("$x^{ 2 }$")
        t2a_dup.shift(3*UP+LEFT)
        t2b_dup=TextMobject("$+$")
        t2b_dup.next_to(t2a_dup,RIGHT,buff=0.3)
        t2c_dup1=TextMobject("2x")
        t2c_dup1.next_to(t2b_dup,RIGHT,buff=0.3)
        t2c_dup2=TextMobject("2x")
        t2c_dup2.next_to(t2b_dup,RIGHT,buff=0.3)
        t2d_dup=TextMobject("=")
        t2d_dup.next_to(t2c_dup1,RIGHT,buff=0.3)
        t2e_dup=TextMobject("15")
        t2e_dup.next_to(t2d_dup,RIGHT,buff=0.3)
        t2_dup=VGroup(t2a_dup,t2b_dup,t2c_dup1,t2c_dup2,t2d_dup,t2e_dup)
        t2_dup.scale(1.6)

        self.play(Write(t1))
        self.wait(0.7)
        self.play(FadeOut(t1))
        self.wait(0.3)
        self.play(Write(t2))
        self.wait(1.4)

        self.play(ApplyMethod(t2.shift,2*UP))
        self.wait(1.5)

        xsquare=Square()
        xsquare.shift(3*LEFT+0.8*DOWN)
        xsquare.scale(0.75)
        xsquare.set_fill(RED,opacity=0.5)
        x1=Rectangle(width=0.5,height=1.5)
        x1.next_to(xsquare,RIGHT,buff=0.1)
        x1.set_fill(GREEN,opacity=0.5)
        x2=Rectangle(width=1.5,height=0.5)
        x2.next_to(xsquare,UP,buff=0.1)
        x2.set_fill(GREEN,opacity=0.5)
        oneleft=Square()
        oneleft.shift((RIGHT+UP)*1.1+3*LEFT+0.8*DOWN)
        oneleft.scale(0.25)
        oneleft.set_fill(BLUE,opacity=0.5)
        
        fifteensquare=Rectangle(width=1.9,height=2)
        fifteensquare.shift(0.5*DOWN+2*RIGHT)
        fifteensquare.set_fill(MAROON_D,opacity=0.5)
        strip=Rectangle(width=0.1,height=2)
        strip.next_to(fifteensquare,RIGHT,buff=0.1)
        strip.set_fill(BLUE,opacity=0.5)

        self.play(ReplacementTransform(t2a_dup,xsquare))
        self.wait(0.4)
        self.play(ReplacementTransform(t2c_dup1,x1),ReplacementTransform(t2c_dup2,x2))
        self.wait(0.4)
        self.play(ReplacementTransform(t2e_dup,fifteensquare))
        self.wait(1)

        xtext_d=TextMobject("x")
        xtext_u=TextMobject("x")
        onetext=TextMobject("1")
        fifteentext=TextMobject("15")
        xtext_d.scale(0.4)
        xtext_u.scale(0.4)
        onetext.scale(0.4)
        fifteentext.scale(0.4)
        xtext_u.shift(3.9*LEFT+0.8*DOWN)
        xtext_d.shift(2.9*LEFT+1.85*DOWN)
        onetext.shift(1.85*DOWN+1.2*RIGHT+3.1*LEFT)
        fifteentext.shift(0.5*DOWN+2*RIGHT)

        self.play(Write(xtext_d),Write(xtext_u),Write(onetext),Write(fifteentext))
        self.wait(2)

        text1=TextMobject("Now to","complete","the square,")
        text1.set_color_by_tex_to_color_map({"complete":RED})
        text2=TextMobject("We introduce a","suitable shape","of","suitable size")
        text2.set_color_by_tex_to_color_map({"suitable shape":BLUE,"suitable size":YELLOW})
        text3=TextMobject("(1X1 square in this case)")
        text4=TextMobject("(a strip of area one unit in this case)")
        text1.scale(0.7)
        text2.scale(0.7)
        text3.scale(0.7)
        text4.scale(0.7)
        text1.shift(2.8*DOWN)
        text2.shift(2.8*DOWN)
        text3.shift(2.8*DOWN+2.5*LEFT)
        text4.shift(2.8*DOWN+2.7*RIGHT)
        tempgroup=VGroup(text3,text4)

        self.play(Write(text1))
        self.wait(1.7)
        self.play(ReplacementTransform(text1,text2))
        self.wait(1.7)
        self.play(ReplacementTransform(text2,tempgroup))
        self.wait(1.3)

        self.play(FadeIn(oneleft),FadeIn(strip))
        self.wait(1.3)

        leftgroup=VGroup(t2a,t2b,t2c)
        plusonetext1=TextMobject("+ 1")
        plusonetext2=TextMobject("+ 1")
        plusonetext1.scale(1.6)
        plusonetext2.scale(1.6)
        plusonetext1.shift(3*UP+0.43*RIGHT)
        plusonetext2.next_to(t2e,RIGHT,buff=0.3)

        self.play(ApplyMethod(leftgroup.shift,1.15*LEFT))
        self.wait(0.8)
        self.play(Write(plusonetext1),Write(plusonetext2))
        self.wait(2)

        leftgroup=VGroup(t2a,t2b,t2c,plusonetext1)
        rightgroup=VGroup(t2e,plusonetext2)
        completetextleft=TextMobject("$(x+1)^{ 2 }$")
        completetextleft.scale(1.6)
        completetextright=TextMobject("$4^{ 2 }$")
        completetextright.scale(1.6)
        completetextleft.next_to(t2d,LEFT,buff=0.4)
        completetextright.next_to(t2d,RIGHT,buff=0.4)
        
        self.play(ReplacementTransform(leftgroup,completetextleft),ReplacementTransform(rightgroup,completetextright))
        self.wait(1.5)

        self.play(FadeOut(xtext_d),FadeOut(xtext_u),FadeOut(onetext))
        self.play(ApplyMethod(x1.shift,0.1*LEFT),ApplyMethod(x2.shift,0.1*DOWN),ApplyMethod(oneleft.shift,0.1*(DOWN+LEFT)))
        xsquare.set_fill(GREEN,opacity=0.5)
        oneleft.set_fill(GREEN,opacity=0.5)
        self.play(ApplyMethod(strip.shift,0.1*LEFT))
        strip.set_fill(MAROON_D,opacity=0.5)
        self.wait(0.6)
        self.play(FadeOut(fifteentext))

        finalleft1=TextMobject("(x+1)")
        finalleft1.scale(0.42)
        finalleft1.shift(0.8*DOWN+4.35*LEFT)
        finalleft2=TextMobject("(x+1)")
        finalleft2.scale(0.42)
        finalleft2.shift(2.9*LEFT+1.85*DOWN)
        finalright1=TextMobject("4")
        finalright2=TextMobject("4")
        finalright1.scale(0.42)
        finalright2.scale(0.42)
        finalright1.next_to(strip,RIGHT,buff=0.2)
        finalright2.next_to(fifteensquare,DOWN,buff=0.2)

        self.play(Write(finalleft1),Write(finalleft2),Write(finalright1),Write(finalright2))
        self.wait(0.4)

        insideleft=TextMobject("$(x+1)^{ 2 }$")
        insideright=TextMobject("$4^{ 2 }$")
        insideleft.scale(0.7)
        insideright.scale(0.7)
        insideleft.shift(2.7*LEFT+0.8*DOWN)
        insideright.shift(0.5*DOWN+2*RIGHT)

        self.play(FadeIn(insideleft),FadeIn(insideright))
        self.wait(1.75)

        equal=TextMobject("=")
        equal.scale(1.6)
        equal.next_to(x1,2.3*RIGHT,buff=0.35)

        self.play(Write(equal))
        self.wait(0.5)

        text5=TextMobject("$\\therefore$ the","sides","of both the squares","should be same!")
        text5.set_color_by_tex_to_color_map({"sides":RED,"should be same!":GREEN})
        text5.scale(0.7)
        text5.shift(2.8*DOWN)

        self.play(FadeOut(tempgroup))
        self.play(Write(text5))
        self.wait(1)
        groupleft=VGroup(x1,x2,xsquare,oneleft,insideleft,finalleft1)
        groupright=VGroup(fifteensquare,strip,insideright,finalright1)
        groupup=VGroup(completetextleft,completetextright,t2d)

        self.play(FadeOut(groupleft),FadeOut(groupright),FadeOut(text5))
        self.play(ApplyMethod(finalleft2.shift,UP),ApplyMethod(finalright2.shift,UP))
        self.play(FadeOut(groupup))
        self.wait(1)        
        finaltext=TextMobject("Hence x=3 ","!")
        finaltext.set_color_by_tex_to_color_map({"!":RED})
        finaltext.scale(1.3)
        group=VGroup(equal,finalleft2,finalright2)
        self.play(ReplacementTransform(group,finaltext))
        self.wait(0.8)
        finaltext1=TextMobject("and x=-5","(if negative values are also considered)")
        finaltext1.set_color_by_tex_to_color_map({"(if negative values are also considered)":BLUE})
        finaltext1.scale(0.8)
        self.play(ApplyMethod(finaltext.shift,UP))
        self.play(Write(finaltext1))
        self.wait(2)
